{"id":"node_modules/pstree.remy/lib/tree.js","dependencies":[{"name":"C:\\Users\\becky\\Desktop\\static-burger\\package.json","includedInParent":true,"mtime":1585672661450},{"name":"C:\\Users\\becky\\Desktop\\static-burger\\node_modules\\pstree.remy\\package.json","includedInParent":true,"mtime":1585672653348},{"name":"child_process","loc":{"line":1,"column":22},"parent":"C:\\Users\\becky\\Desktop\\static-burger\\node_modules\\pstree.remy\\lib\\tree.js","resolved":"C:\\Users\\becky\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\src\\builtins\\_empty.js"}],"generated":{"js":"const spawn = require('child_process').spawn;\n\nmodule.exports = function(rootPid, callback) {\n  const tree = {};\n  var output = '';\n\n  // *nix\n  const ps = spawn('ps', ['-A', '-o', 'ppid,pid']);\n  ps.stdout.on('data', data => {\n    output += data.toString('ascii');\n  });\n\n  ps.on('close', () => {\n    try {\n      const res = output\n        .split('\\n')\n        .slice(1)\n        .map(_ => _.trim())\n        .reduce((acc, line) => {\n          if (line.indexOf(rootPid + ' ') === 0) {\n            const pid = line.split(/\\s+/).pop();\n            acc.push(parseInt(pid, 10));\n            rootPid = pid;\n          }\n\n          return acc;\n        }, []);\n\n      callback(null, res);\n    } catch (e) {\n      callback(e, null);\n    }\n  });\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/pstree.remy/lib/tree.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}}],"sources":{"node_modules/pstree.remy/lib/tree.js":"const spawn = require('child_process').spawn;\n\nmodule.exports = function(rootPid, callback) {\n  const tree = {};\n  var output = '';\n\n  // *nix\n  const ps = spawn('ps', ['-A', '-o', 'ppid,pid']);\n  ps.stdout.on('data', data => {\n    output += data.toString('ascii');\n  });\n\n  ps.on('close', () => {\n    try {\n      const res = output\n        .split('\\n')\n        .slice(1)\n        .map(_ => _.trim())\n        .reduce((acc, line) => {\n          if (line.indexOf(rootPid + ' ') === 0) {\n            const pid = line.split(/\\s+/).pop();\n            acc.push(parseInt(pid, 10));\n            rootPid = pid;\n          }\n\n          return acc;\n        }, []);\n\n      callback(null, res);\n    } catch (e) {\n      callback(e, null);\n    }\n  });\n};\n"},"lineCount":35}},"error":null,"hash":"8337b9dd7b7eca0906cb560ac71829a3","cacheData":{"env":{}}}